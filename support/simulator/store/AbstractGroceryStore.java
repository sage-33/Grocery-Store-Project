package simulator.store;

import java.util.List;

import simulator.bigbrother.BigBrother;
import simulator.checkout.CheckoutLineInterface;
import simulator.checkout.Transaction;

/**
 * An {@link AbstractGroceryStore} defines a store in the Grocery Store
 * Simulator 2014 game prototype. Each, {@link AbstractGroceryStore} is
 * registered with {@link BigBrother} upon construction.
 *
 * @author jcollard, jddevaug
 *
 */
public abstract class AbstractGroceryStore {

  /**
   * Registers this {@link AbstractGroceryStore} with {@link BigBrother}.
   */
  protected AbstractGroceryStore() {
    BigBrother.getBigBrother().registerStore(this);
  }

  /**
   * Advances this {@link AbstractGroceryStore} by one time step. This method
   * is called by {@link BigBrother}.
   */
  public abstract void tick();

  /**
   * Returns a {@link List} of {@link CheckoutLineInterface}s that a
   * {@link Shopper} may choose from when shopping at this
   * {@link AbstractGroceryStore}. {@link BigBrother} uses this method to
   * assign {@link Shopper}s to your store. If, this method returns
   * {@code null} a {@link BigBrotherIsWatchingYouException} will be thrown.
   *
   * @return Returns a {@link List} of {@link CheckoutLineInterface}s that a
   *         {@link Shopper} may choose from when shopping at this
   *         {@link AbstractGroceryStore}.
   */
  public abstract List<CheckoutLineInterface> getLines();

  /**
   * Returns a {@link List} of {@link Transaction}s that this
   * {@link AbstractGroceryStore} has created.{@link BigBrother} uses this
   * method to monitor that your store is not trying to generate falsified
   * financial reports. If, this method returns {@code null} a
   * {@link BigBrotherIsWatchingYouException} will be thrown.
   *
   * @return a {@link List} of {@link Transaction}s that this
   *         {@link AbstractGroceryStore} has created.
   */
  public abstract List<Transaction> getTransactions();

  /**
   * Returns the average amount of time a {@link Shopper} must wait in your
   * store before they are checked out.
   *
   * @return the average amount of time a {@link Shopper} must wait in your
   *         store before they are checked out.
   */
  public abstract double getAverageWaitingTime();

  /**
   * Returns the total amount of money collected by all {@link Transaction}s
   * created in this {@link AbstractGroceryStore}.
   *
   * @return the total amount of money collected by all {@link Transaction}s
   *         created in this {@link AbstractGroceryStore}.
   */
  public abstract double getTotalSales();

  /**
   * Returns the total cost to this {@link AbstractGroceryStore}. This is the
   * sum of the cost of all groceries and cost of all {@link AbstractRegister}
   * s used.
   *
   * @return the total cost to this {@link AbstractGroceryStore}.
   */
  public abstract double getTotalCost();

  /**
   * Returns the total amount of profit generated by this
   * {@link AbstractGroceryStore}.
   *
   * @return the total amount of profit generated by this
   *         {@link AbstractGroceryStore}.
   */
  public abstract double getTotalProfit();

  /**
   * Returns the total number of {@link Shopper}s that visited this
   * {@link AbstractGroceryStore}.
   *
   * @return the total number of {@link Shopper}s that visited this
   *         {@link AbstractGroceryStore}
   */
  public abstract int getNumberOfShoppers();

  /**
   * Returns the total number of {@link Shopper}s that became irate while
   * visiting this {@link AbstractGroceryStore}.
   *
   * @return the total number of {@link Shopper}s that became irate while
   *         visiting this {@link AbstractGroceryStore}
   */
  public abstract int getNumberOfIrateShoppers();

}
